Help on class Column in module PySimpleGUI.PySimpleGUI:

class Column(Element)
 |  Column(layout, background_color=None, size=(None, None), s=(None, None), size_subsample_width=1, size_subsample_height=2, pad=None, p=None, scrollable=False, vertical_scroll_only=False, right_click_menu=None, key=None, k=None, visible=True, justification=None, element_justification=None, vertical_alignment=None, grab=None, expand_x=None, expand_y=None, metadata=None, sbar_trough_color=None, sbar_background_color=None, sbar_arrow_color=None, sbar_width=None, sbar_arrow_width=None, sbar_frame_color=None, sbar_relief=None)
 |
 |  A container element that is used to create a layout within your window's layout
 |
 |  Method resolution order:
 |      Column
 |      Element
 |      builtins.object
 |
 |  Methods defined here:
 |
 |  AddRow = add_row(self, *args)
 |
 |  Layout = layout(self, rows)
 |
 |  Update = update(self, visible=None)
 |
 |  __init__(self, layout, background_color=None, size=(None, None), s=(None, None), size_subsample_width=1, size_subsample_height=2, pad=None, p=None, scrollable=False, vertical_scroll_only=False, right_click_menu=None, key=None, k=None, visible=True, justification=None, element_justification=None, vertical_alignment=None, grab=None, expand_x=None, expand_y=None, metadata=None, sbar_trough_color=None, sbar_background_color=None, sbar_arrow_color=None, sbar_width=None, sbar_arrow_width=None, sbar_frame_color=None, sbar_relief=None)
 |      :param layout:                      Layout that will be shown in the Column container
 |      :type layout:                       List[List[Element]]
 |      :param background_color:            color of background of entire Column
 |      :type background_color:             (str)
 |      :param size:                        (width, height) size in pixels (doesn't work quite right, sometimes only 1 dimension is set by tkinter. Use a Sizer Element to help set sizes
 |      :type size:                         (int | None, int | None)
 |      :param s:                           Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
 |      :type s:                            (int | None, int | None)
 |      :param size_subsample_width:        Determines the size of a scrollable column width based on 1/size_subsample * required size. 1 = match the contents exactly, 2 = 1/2 contents size, 3 = 1/3. Can be a fraction to make larger than required.
 |      :type size_subsample_width:         (float)
 |      :param size_subsample_height:       Determines the size of a scrollable height based on 1/size_subsample * required size. 1 = match the contents exactly, 2 = 1/2 contents size, 3 = 1/3. Can be a fraction to make larger than required..
 |      :type size_subsample_height:        (float)
 |      :param pad:                         Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
 |      :type pad:                          (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
 |      :param p:                           Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
 |      :type p:                            (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
 |      :param scrollable:                  if True then scrollbars will be added to the column
 |      :type scrollable:                   (bool)
 |      :param vertical_scroll_only:        if Truen then no horizontal scrollbar will be shown
 |      :type vertical_scroll_only:         (bool)
 |      :param right_click_menu:            A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.
 |      :type right_click_menu:             List[List[ List[str] | str ]]
 |      :param key:                         Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window
 |      :type key:                          str | int | tuple | object
 |      :param k:                           Same as the Key. You can use either k or key. Which ever is set will be used.
 |      :type k:                            str | int | tuple | object
 |      :param visible:                     set visibility state of the element
 |      :type visible:                      (bool)
 |      :param justification:               set justification for the Column itself. Note entire row containing the Column will be affected
 |      :type justification:                (str)
 |      :param element_justification:       All elements inside the Column will have this justification 'left', 'right', 'center' are valid values
 |      :type element_justification:        (str)
 |      :param vertical_alignment:          Place the column at the 'top', 'center', 'bottom' of the row (can also use t,c,r). Defaults to no setting (tkinter decides)
 |      :type vertical_alignment:           (str)
 |      :param grab:                        If True can grab this element and move the window around. Default is False
 |      :type grab:                         (bool)
 |      :param expand_x:                    If True the column will automatically expand in the X direction to fill available space
 |      :type expand_x:                     (bool)
 |      :param expand_y:                    If True the column will automatically expand in the Y direction to fill available space
 |      :type expand_y:                     (bool)
 |      :param metadata:                    User metadata that can be set to ANYTHING
 |      :type metadata:                     (Any)
 |      :param sbar_trough_color:           Scrollbar color of the trough
 |      :type sbar_trough_color:            (str)
 |      :param sbar_background_color:       Scrollbar color of the background of the arrow buttons at the ends AND the color of the "thumb" (the thing you grab and slide). Switches to arrow color when mouse is over
 |      :type sbar_background_color:        (str)
 |      :param sbar_arrow_color:            Scrollbar color of the arrow at the ends of the scrollbar (it looks like a button). Switches to background color when mouse is over
 |      :type sbar_arrow_color:             (str)
 |      :param sbar_width:                  Scrollbar width in pixels
 |      :type sbar_width:                   (int)
 |      :param sbar_arrow_width:            Scrollbar width of the arrow on the scrollbar. It will potentially impact the overall width of the scrollbar
 |      :type sbar_arrow_width:             (int)
 |      :param sbar_frame_color:            Scrollbar Color of frame around scrollbar (available only on some ttk themes)
 |      :type sbar_frame_color:             (str)
 |      :param sbar_relief:                 Scrollbar relief that will be used for the "thumb" of the scrollbar (the thing you grab that slides). Should be a constant that is defined at starting with "RELIEF_" - RELIEF_RAISED, RELIEF_SUNKEN, RELIEF_FLAT, RELIEF_RIDGE, RELIEF_GROOVE, RELIEF_SOLID
 |      :type sbar_relief:                  (str)
 |
 |  add_row(self, *args)
 |      Not recommended user call.  Used to add rows of Elements to the Column Element.
 |
 |      :param *args: The list of elements for this row
 |      :type *args:  List[Element]
 |
 |  contents_changed(self)
 |      When a scrollable column has part of its layout changed by making elements visible or invisible or the
 |      layout is extended for the Column, then this method needs to be called so that the new scroll area
 |      is computed to match the new contents.
 |
 |  layout(self, rows)
 |      Can use like the Window.Layout method, but it's better to use the layout parameter when creating
 |
 |      :param rows: The rows of Elements
 |      :type rows:  List[List[Element]]
 |      :return:     Used for chaining
 |      :rtype:      (Column)
 |
 |  update(self, visible=None)
 |      Changes some of the settings for the Column Element. Must call `Window.Read` or `Window.Finalize` prior
 |
 |      Changes will not be visible in your window until you call window.read or window.refresh.
 |
 |      If you change visibility, your element may MOVE. If you want it to remain stationary, use the "layout helper"
 |      function "pin" to ensure your element is "pinned" to that location in your layout so that it returns there
 |      when made visible.
 |
 |      :param visible: control visibility of element
 |      :type visible:  (bool)
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from Element:
 |
 |  SetFocus = set_focus(self, force=False)
 |
 |  SetTooltip = set_tooltip(self, tooltip_text)
 |
 |  __call__(self, *args, **kwargs)
 |      Makes it possible to "call" an already existing element.  When you do make the "call", it actually calls
 |      the Update method for the element.
 |      Example:    If this text element was in yoiur layout:
 |                  sg.Text('foo', key='T')
 |                  Then you can call the Update method for that element by writing:
 |                  window.find_element('T')('new text value')
 |
 |  bind(self, bind_string, key_modifier, propagate=True)
 |      Used to add tkinter events to an Element.
 |      The tkinter specific data is in the Element's member variable user_bind_event
 |      :param bind_string:  The string tkinter expected in its bind function
 |      :type bind_string:   (str)
 |      :param key_modifier: Additional data to be added to the element's key when event is returned
 |      :type key_modifier:  (str)
 |      :param propagate:    If True then tkinter will be told to propagate the event to the element
 |      :type propagate:     (bool)
 |
 |  block_focus(self, block=True)
 |      Enable or disable the element from getting focus by using the keyboard.
 |      If the block parameter is True, then this element will not be given focus by using
 |      the keyboard to go from one element to another.
 |      You CAN click on the element and utilize it.
 |
 |      :param block: if True the element will not get focus via the keyboard
 |      :type block:  bool
 |
 |  expand(self, expand_x=False, expand_y=False, expand_row=True)
 |      Causes the Element to expand to fill available space in the X and Y directions.  Can specify which or both directions
 |
 |      :param expand_x:   If True Element will expand in the Horizontal directions
 |      :type expand_x:    (bool)
 |      :param expand_y:   If True Element will expand in the Vertical directions
 |      :type expand_y:    (bool)
 |      :param expand_row: If True the row containing the element will also expand. Without this your element is "trapped" within the row
 |      :type expand_row:  (bool)
 |
 |  get_next_focus(self)
 |      Gets the next element that should get focus after this element.
 |
 |      :return:    Element that will get focus after this one
 |      :rtype:     (Element)
 |
 |  get_previous_focus(self)
 |      Gets the element that should get focus previous to this element.
 |
 |      :return:    Element that should get the focus before this one
 |      :rtype:     (Element)
 |
 |  get_size(self)
 |      Return the size of an element in Pixels.  Care must be taken as some elements use characters to specify their size but will return pixels when calling this get_size method.
 |      :return: width and height of the element
 |      :rtype:  (int, int)
 |
 |  grab_anywhere_exclude(self)
 |      Excludes this element from being used by the grab_anywhere feature
 |      Handy for elements like a Graph element when dragging is enabled. You want the Graph element to get the drag events instead of the window dragging.
 |
 |  grab_anywhere_include(self)
 |      Includes this element in the grab_anywhere feature
 |      This will allow you to make a Multline element drag a window for example
 |
 |  hide_row(self)
 |      Hide the entire row an Element is located on.
 |      Use this if you must have all space removed when you are hiding an element, including the row container
 |
 |  set_cursor(self, cursor=None, cursor_color=None)
 |      Sets the cursor for the current Element.
 |      "Cursor" is used in 2 different ways in this call.
 |      For the parameter "cursor" it's actually the mouse pointer.
 |      If you do not want any mouse pointer, then use the string "none"
 |      For the parameter "cursor_color" it's the color of the beam used when typing into an input element
 |
 |      :param cursor:       The tkinter cursor name
 |      :type cursor:        (str)
 |      :param cursor_color: color to set the "cursor" to
 |      :type cursor_color:  (str)
 |
 |  set_focus(self, force=False)
 |      Sets the current focus to be on this element
 |
 |      :param force: if True will call focus_force otherwise calls focus_set
 |      :type force:  bool
 |
 |  set_right_click_menu(self, menu=None)
 |
 |  set_size(self, size=(None, None))
 |      Changes the size of an element to a specific size.
 |      It's possible to specify None for one of sizes so that only 1 of the element's dimensions are changed.
 |
 |      :param size: The size in characters, rows typically. In some cases they are pixels
 |      :type size:  (int, int)
 |
 |  set_tooltip(self, tooltip_text)
 |      Called by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').
 |
 |      :param tooltip_text: the text to show in tooltip.
 |      :type tooltip_text:  (str)
 |
 |  set_vscroll_position(self, percent_from_top)
 |      Attempts to set the vertical scroll postition for an element's Widget
 |      :param percent_from_top: From 0 to 1.0, the percentage from the top to move scrollbar to
 |      :type percent_from_top:  (float)
 |
 |  unbind(self, bind_string)
 |      Removes a previously bound tkinter event from an Element.
 |      :param bind_string: The string tkinter expected in its bind function
 |      :type bind_string:  (str)
 |
 |  unhide_row(self)
 |      Unhides (makes visible again) the row container that the Element is located on.
 |      Note that it will re-appear at the bottom of the window / container, most likely.
 |
 |  ----------------------------------------------------------------------
 |  Readonly properties inherited from Element:
 |
 |  key
 |      Returns key for the element.  This is a READONLY property.
 |      Keys can be any hashable object (basically anything except a list... tuples are ok, but not lists)
 |      :return: The window's Key
 |      :rtype:  (Any)
 |
 |  visible
 |      Returns visibility state for the element.  This is a READONLY property
 |      :return: Visibility state for element
 |      :rtype:  (bool)
 |
 |  widget
 |      Returns tkinter widget for the element.  This is a READONLY property.
 |      The implementation is that the Widget member variable is returned. This is a backward compatible addition
 |      :return:    The element's underlying tkinter widget
 |      :rtype:     (tkinter.Widget)
 |  __dict__
 |      dictionary for instance variables (if defined)
 |
 |  __weakref__
 |      list of weak references to the object (if defined)
 |
 |  metadata
 |      Metadata is an Element property that you can use at any time to hold any value
 |      :return: the current metadata value
 |      :rtype:  (Any)

None