Help on class Image in module PySimpleGUI.PySimpleGUI:

class Image(Element)
 |  Image(source=None, filename=None, data=None, background_color=None, size=(None, None), s=(None, None), pad=None, p=None, key=None, k=None, tooltip=None, subsample=None, zoom=None, right_click_menu=None, expand_x=False, expand_y=False, visible=True, enable_events=False, metadata=None)
 |
 |  Image Element - show an image in the window. Should be a GIF or a PNG only
 |
 |  Method resolution order:
 |      Image
 |      Element
 |      builtins.object
 |
 |  Methods defined here:
 |
 |  Update = update(self, source=None, filename=None, data=None, size=(None, None), subsample=None, zoom=None, visible=None)
 |
 |  UpdateAnimation = update_animation(self, source, time_between_frames=0)
 |
 |  __init__(self, source=None, filename=None, data=None, background_color=None, size=(None, None), s=(None, None), pad=None, p=None, key=None, k=None, tooltip=None, subsample=None, zoom=None, right_click_menu=None, expand_x=False, expand_y=False, visible=True, enable_events=False, metadata=None)
 |      :param source:           A filename or a base64 bytes. Will automatically detect the type and fill in filename or data for you.
 |      :type source:            str | bytes | None
 |      :param filename:         image filename if there is a button image. GIFs and PNGs only.
 |      :type filename:          str | None
 |      :param data:             Raw or Base64 representation of the image to put on button. Choose either filename or data
 |      :type data:              bytes | str | None
 |      :param background_color: color of background
 |      :type background_color:
 |      :param size:             (width, height) size of image in pixels
 |      :type size:              (int, int)
 |      :param s:                Same as size parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, size will be used
 |      :type s:                 (int, int)  | (None, None) | int
 |      :param pad:              Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it's converted into a tuple (int, int)
 |      :type pad:               (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
 |      :param p:                Same as pad parameter.  It's an alias. If EITHER of them are set, then the one that's set will be used. If BOTH are set, pad will be used
 |      :type p:                 (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int
 |      :param key:              Used with window.find_element and with return values to uniquely identify this element to uniquely identify this element
 |      :type key:               str | int | tuple | object
 |      :param k:                Same as the Key. You can use either k or key. Which ever is set will be used.
 |      :type k:                 str | int | tuple | object
 |      :param tooltip:          text, that will appear when mouse hovers over the element
 |      :type tooltip:           (str)
 |      :param subsample:        amount to reduce the size of the image. Divides the size by this number. 2=1/2, 3=1/3, 4=1/4, etc
 |      :type subsample:         (int)
 |      :param zoom:             amount to increase the size of the image.
 |      :type zoom:              (int)
 |      :param right_click_menu: A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.
 |      :type right_click_menu:  List[List[ List[str] | str ]]
 |      :param expand_x:         If True the element will automatically expand in the X direction to fill available space
 |      :type expand_x:          (bool)
 |      :param expand_y:         If True the element will automatically expand in the Y direction to fill available space
 |      :type expand_y:          (bool)
 |      :param visible:          set visibility state of the element
 |      :type visible:           (bool)
 |      :param enable_events:    Turns on the element specific events. For an Image element, the event is "image clicked"
 |      :type enable_events:     (bool)
 |      :param metadata:         User metadata that can be set to ANYTHING
 |      :type metadata:          (Any)
 |
 |  update(self, source=None, filename=None, data=None, size=(None, None), subsample=None, zoom=None, visible=None)
 |      Changes some of the settings for the Image Element. Must call `Window.Read` or `Window.Finalize` prior.
 |      To clear an image that's been displayed, call with NONE of the options set.  A blank update call will
 |      delete the previously shown image.
 |
 |      Changes will not be visible in your window until you call window.read or window.refresh.
 |
 |      If you change visibility, your element may MOVE. If you want it to remain stationary, use the "layout helper"
 |      function "pin" to ensure your element is "pinned" to that location in your layout so that it returns there
 |      when made visible.
 |
 |      :param source:   A filename or a base64 bytes. Will automatically detect the type and fill in filename or data for you.
 |      :type source:    str | bytes | None
 |      :param filename: filename to the new image to display.
 |      :type filename:  (str)
 |      :param data:     Base64 encoded string OR a tk.PhotoImage object
 |      :type data:      str | tkPhotoImage
 |      :param size:     (width, height) size of image in pixels
 |      :type size:      Tuple[int,int]
 |      :param subsample: amount to reduce the size of the image. Divides the size by this number. 2=1/2, 3=1/3, 4=1/4, etc
 |      :type subsample: (int)
 |      :param zoom:     amount to increase the size of the image
 |      :type zoom:      (int)
 |      :param visible:  control visibility of element
 |      :type visible:   (bool)
 |
 |  update_animation(self, source, time_between_frames=0)
 |      Show an Animated GIF. Call the function as often as you like. The function will determine when to show the next frame and will automatically advance to the next frame at the right time.
 |      NOTE - does NOT perform a sleep call to delay
 |      :param source:              Filename or Base64 encoded string containing Animated GIF
 |      :type source:               str | bytes | None
 |      :param time_between_frames: Number of milliseconds to wait between showing frames
 |      :type time_between_frames:  (int)
 |
 |  update_animation_no_buffering(self, source, time_between_frames=0)
 |      Show an Animated GIF. Call the function as often as you like. The function will determine when to show the next frame and will automatically advance to the next frame at the right time.
 |      NOTE - does NOT perform a sleep call to delay
 |
 |      :param source:              Filename or Base64 encoded string containing Animated GIF
 |      :type source:               str | bytes
 |      :param time_between_frames: Number of milliseconds to wait between showing frames
 |      :type time_between_frames:  (int)
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from Element:
 |
 |  SetFocus = set_focus(self, force=False)
 |
 |  SetTooltip = set_tooltip(self, tooltip_text)
 |
 |  __call__(self, *args, **kwargs)
 |      Makes it possible to "call" an already existing element.  When you do make the "call", it actually calls
 |      the Update method for the element.
 |      Example:    If this text element was in yoiur layout:
 |                  sg.Text('foo', key='T')
 |                  Then you can call the Update method for that element by writing:
 |                  window.find_element('T')('new text value')
 |
 |  bind(self, bind_string, key_modifier, propagate=True)
 |      Used to add tkinter events to an Element.
 |      The tkinter specific data is in the Element's member variable user_bind_event
 |      :param bind_string:  The string tkinter expected in its bind function
 |      :type bind_string:   (str)
 |      :param key_modifier: Additional data to be added to the element's key when event is returned
 |      :type key_modifier:  (str)
 |      :param propagate:    If True then tkinter will be told to propagate the event to the element
 |      :type propagate:     (bool)
 |
 |  block_focus(self, block=True)
 |      Enable or disable the element from getting focus by using the keyboard.
 |      If the block parameter is True, then this element will not be given focus by using
 |      the keyboard to go from one element to another.
 |      You CAN click on the element and utilize it.
 |
 |      :param block: if True the element will not get focus via the keyboard
 |      :type block:  bool
 |
 |  expand(self, expand_x=False, expand_y=False, expand_row=True)
 |      Causes the Element to expand to fill available space in the X and Y directions.  Can specify which or both directions
 |
 |      :param expand_x:   If True Element will expand in the Horizontal directions
 |      :type expand_x:    (bool)
 |      :param expand_y:   If True Element will expand in the Vertical directions
 |      :type expand_y:    (bool)
 |      :param expand_row: If True the row containing the element will also expand. Without this your element is "trapped" within the row
 |      :type expand_row:  (bool)
 |
 |  get_next_focus(self)
 |      Gets the next element that should get focus after this element.
 |
 |      :return:    Element that will get focus after this one
 |      :rtype:     (Element)
 |
 |  get_previous_focus(self)
 |      Gets the element that should get focus previous to this element.
 |
 |      :return:    Element that should get the focus before this one
 |      :rtype:     (Element)
 |
 |  get_size(self)
 |      Return the size of an element in Pixels.  Care must be taken as some elements use characters to specify their size but will return pixels when calling this get_size method.
 |      :return: width and height of the element
 |      :rtype:  (int, int)
 |
 |  grab_anywhere_exclude(self)
 |      Excludes this element from being used by the grab_anywhere feature
 |      Handy for elements like a Graph element when dragging is enabled. You want the Graph element to get the drag events instead of the window dragging.
 |
 |  grab_anywhere_include(self)
 |      Includes this element in the grab_anywhere feature
 |      This will allow you to make a Multline element drag a window for example
 |
 |  hide_row(self)
 |      Hide the entire row an Element is located on.
 |      Use this if you must have all space removed when you are hiding an element, including the row container
 |
 |  save_element_screenshot_to_disk(self, filename=None)
 |      Saves an image of the PySimpleGUI window provided into the filename provided
 |
 |      :param filename:        Optional filename to save screenshot to. If not included, the User Settinds are used to get the filename
 |      :return:                A PIL ImageGrab object that can be saved or manipulated
 |      :rtype:                 (PIL.ImageGrab | None)
 |
 |  set_cursor(self, cursor=None, cursor_color=None)
 |      Sets the cursor for the current Element.
 |      "Cursor" is used in 2 different ways in this call.
 |      For the parameter "cursor" it's actually the mouse pointer.
 |      If you do not want any mouse pointer, then use the string "none"
 |      For the parameter "cursor_color" it's the color of the beam used when typing into an input element
 |
 |      :param cursor:       The tkinter cursor name
 |      :type cursor:        (str)
 |      :param cursor_color: color to set the "cursor" to
 |      :type cursor_color:  (str)
 |
 |  set_focus(self, force=False)
 |      Sets the current focus to be on this element
 |
 |      :param force: if True will call focus_force otherwise calls focus_set
 |      :type force:  bool
 |
 |  set_right_click_menu(self, menu=None)
 |
 |  set_size(self, size=(None, None))
 |      Changes the size of an element to a specific size.
 |      It's possible to specify None for one of sizes so that only 1 of the element's dimensions are changed.
 |
 |      :param size: The size in characters, rows typically. In some cases they are pixels
 |      :type size:  (int, int)
 |
 |  set_tooltip(self, tooltip_text)
 |      Called by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').
 |
 |      :param tooltip_text: the text to show in tooltip.
 |      :type tooltip_text:  (str)
 |
 |  set_vscroll_position(self, percent_from_top)
 |      Attempts to set the vertical scroll postition for an element's Widget
 |      :param percent_from_top: From 0 to 1.0, the percentage from the top to move scrollbar to
 |      :type percent_from_top:  (float)
 |
 |  unbind(self, bind_string)
 |      Removes a previously bound tkinter event from an Element.
 |      :param bind_string: The string tkinter expected in its bind function
 |      :type bind_string:  (str)
 |      :return: The window's Key
 |      :rtype:  (Any)
 |
 |  visible
 |      Returns visibility state for the element.  This is a READONLY property
 |      :return: Visibility state for element
 |      :rtype:  (bool)
 |
 |  widget
 |      Returns tkinter widget for the element.  This is a READONLY property.
 |      The implementation is that the Widget member variable is returned. This is a backward compatible addition
 |      :return:    The element's underlying tkinter widget
 |      :rtype:     (tkinter.Widget)
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Element:
 |
 |  __dict__
 |      dictionary for instance variables (if defined)
 |
 |  __weakref__
 |      list of weak references to the object (if defined)
 |
 |  metadata
 |      Metadata is an Element property that you can use at any time to hold any value
 |      :return: the current metadata value
 |      :rtype:  (Any)

None